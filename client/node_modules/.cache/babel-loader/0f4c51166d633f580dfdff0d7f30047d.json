{"ast":null,"code":"var _jsxFileName = \"/Users/aspera/Documents/stripe/client/src/components/GenUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenUser() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"https://randomuser.me/api\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: items.results ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"image\",\n        className: \"profile-image\",\n        src: items.results[0].picture.large\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 34\n      }, this) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(GenUser, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = GenUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenUser\");","map":{"version":3,"sources":["/Users/aspera/Documents/stripe/client/src/components/GenUser.js"],"names":["React","useEffect","useState","GenUser","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","result","message","results","picture","large"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA4BC,QAA5B,QAA2C,OAA3C;;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC,CAH8B,CAK9B;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,KAAK,CAAC,2BAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGGG,MAAD,IAAY;AACRP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACK,MAAD,CAAR;AACD,KANL,EAOKV,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAVL;AAYD,GAbQ,EAaN,EAbM,CAAT;;AAcA,MAAIA,KAAJ,EAAU;AACN,wBAAO;AAAA,2BAAYA,KAAK,CAACW,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAGK,IAAI,CAACT,QAAL,EAAc;AACf,wBACI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GANI,MAOD;AACA,wBACI;AAAA,gBACKE,KAAK,CAACQ,OAAN,gBAAgB;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAC,eAA9B;AAA8C,QAAA,GAAG,EAAER,KAAK,CAACQ,OAAN,CAAc,CAAd,EAAiBC,OAAjB,CAAyBC;AAA5E;AAAA;AAAA;AAAA;AAAA,cAAhB,GAAuG;AAD5G;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AACJ;;GAvCuBf,O;;KAAAA,O","sourcesContent":["import React, { useEffect , useState} from 'react'\n\nexport default function GenUser() {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n  \n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n      fetch(\"https://randomuser.me/api\")\n        .then(res => res.json())\n        .then(\n        (result) => {\n            setIsLoaded(true);\n            setItems(result); \n          },\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }, [])\n    if (error){\n        return <div>Error {error.message}</div>\n    }\n    else if (!isLoaded){\n        return (\n            <div>\n                <div>Loading...</div>\n            </div>\n        )\n    }\n    else{\n        return (\n            <div>\n                {items.results ? <input type=\"image\" className=\"profile-image\" src={items.results[0].picture.large}/> : \"\"}\n            </div>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}